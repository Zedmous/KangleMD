import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
sns.set()
from pylab import savefig
 
print("PASO 1", "LEYENDO LA DATA DEL ARCHIVO CSV")
datos=pd.read_csv('database.csv')
data=datos.copy()
print("")
print("Datos cargados exitosamente")
print("")
print("PASO 2 MOSTRAMOS INFORMACION DE LOS DATOS")
print("--")
print(data.info(verbose=True, null_counts=True))
print("--")
print("")
print("")
print("PASO 3 TRANSFORMACION DE LOS DATOS A SU TIPO CORRESPONDIENTE")
#Cambiando de tipo nominal a entero 
data["Perpetrator Age"] = pd.to_numeric(data["Perpetrator Age"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Perpetrator Age"] = data["Perpetrator Age"].astype("int64")
print("")
print("")
print("PASO 4 FILTRANDO DATOS VALIDOS DE LOS DATOS")
data = data.drop(data.index[data['Victim Age']>100],axis=0)
data = data.drop(data.index[data['Perpetrator Age']>100],axis=0)
data = data.drop(data.index[data['Incident']>=80],axis=0)
print("")
print("")
print("PASO 5 ELIMINAMOS LOS DATOS DUPLICADOS Y SELECCIONAR LOS NECESARIOS")
print("Se selecciona las columnas que no se usaran, y se eliminaran los datos duplicados")
data=data.drop(['Incident','Agency Code','Agency Name','Agency Type','City','Year','Month','Victim Ethnicity','Perpetrator Ethnicity','Victim Count','Perpetrator Count','Record Source'],axis=1)
data = data.drop_duplicates()
#calculamos cuantos existen de cada tipo de dato
states= data.groupby('State')['Record ID'].count()
ctypes = data.groupby('Crime Type')['Record ID'].count()
csolveds = data.groupby('Crime Solved')['Record ID'].count()
vsexs = data.groupby('Victim Sex')['Record ID'].count()
vraces = data.groupby('Victim Race')['Record ID'].count()
psexs = data.groupby('Perpetrator Sex')['Record ID'].count()
praces = data.groupby('Perpetrator Race')['Record ID'].count()
relations=data.groupby('Relationship')['Record ID'].count()
weapons = data.groupby('Weapon')['Record ID'].count()
print("-DATOS LIMPIOS-")
print(data.info(verbose=True, null_counts=True))
print("--")
print("")
print("")
print("PASO 6 TRANSFORMACION DE LOS DATOS")
print("VARIABLES CUALITATIVAS NOMINALES")
print("---0---")
print("---State---")
datosmapa=data
data["State"] = data["State"].astype("category").cat.codes
data["State"] = pd.to_numeric(data["State"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["State"] = data["State"].astype("int64")
print(data['State'].describe())
print(states)
dstates=pd.DataFrame(states)
dstates.reset_index().to_csv('statses.csv',header=True,index=False)
print("---1---")
print("---Crime Type---")
data["Crime Type"] = data["Crime Type"].astype("category").cat.codes
data["Crime Type"] = pd.to_numeric(data["Crime Type"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Crime Type"] = data["Crime Type"].astype("int64")

print(data['Crime Type'].describe())
print(ctypes)
print("")
print("---2---")
print("---Crime Solved---")
data["Crime Solved"] = data["Crime Solved"].astype("category").cat.codes
data["Crime Solved"] = pd.to_numeric(data["Crime Solved"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Crime Solved"] = data["Crime Solved"].astype("int64")
print(data['Crime Solved'].describe())
print(csolveds)
print("")
print("---3---")
print("---Victim Sex---")
data["Victim Sex"] = data["Victim Sex"].astype("category").cat.codes
data["Victim Sex"] = pd.to_numeric(data["Victim Sex"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Victim Sex"] = data["Victim Sex"].astype("int64")
print(data['Victim Sex'].describe())
print(vsexs)
print("")
print("---4---")
print("---Victim Race---")
data["Victim Race"] = data["Victim Race"].astype("category").cat.codes
data["Victim Race"] = pd.to_numeric(data["Victim Race"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Victim Race"] = data["Victim Race"].astype("int64")
print(data['Victim Race'].describe())
print(vraces)
print("")
print("---5---")
print("---Perpetrator Sex---")
data["Perpetrator Sex"] = data["Perpetrator Sex"].astype("category").cat.codes
data["Perpetrator Sex"] = pd.to_numeric(data["Perpetrator Sex"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Perpetrator Sex"] = data["Perpetrator Sex"].astype("int64")
print(data['Perpetrator Sex'].describe())
print(psexs)
print("")
print("---6---")
print("---Perpetrator Race---")
data["Perpetrator Race"] = data["Perpetrator Race"].astype("category").cat.codes
data["Perpetrator Race"] = pd.to_numeric(data["Perpetrator Race"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Perpetrator Race"] = data["Perpetrator Race"].astype("int64")
print(data['Perpetrator Race'].describe())
print(praces)
print("")
print("---7---")
print("---Relationship---")
data["Relationship"] = data["Relationship"].astype("category").cat.codes
data["Relationship"] = pd.to_numeric(data["Relationship"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Relationship"] = data["Relationship"].astype("int64")
print(data["Relationship"].describe())
print(relations)
drelations=pd.DataFrame(relations)
drelations.reset_index().to_csv('relations.csv',header=True,index=False)
print("")
print("---8---")
print("---Weapon---")
data["Weapon"] = data["Weapon"].astype("category").cat.codes
data["Weapon"] = pd.to_numeric(data["Weapon"], errors="coerce")
data = data.replace(np.nan, 0, regex=True)
data["Weapon"] = data["Weapon"].astype("int64")
print(data["Weapon"].describe())
print(weapons)
dweapons=pd.DataFrame(weapons)
dweapons.reset_index().to_csv('weapons.csv',header=True,index=False)
print("")
print("VARIABLES CUANTITATIVAS")

print("---9---")
print("---Victim Age---")
print(data["Victim Age"].describe())
print("")
print("---10---")
print("---Perpetrator Age---")
print(data["Perpetrator Age"].describe())

print("")
print("")
print("PASO 7 VERIFICAMOS SI HAY DATOS PERDIDOS")
data=data.drop(['Record ID'],axis=1)

print(data.info(verbose=True, null_counts=True))
print("")
print("")
print("PASO 8 EXPORTANDO LA DATA NUEVA A CSV")
print("")

#df=pd.DataFrame(data)
#df.reset_index().to_csv('DBLimpios.csv',header=True,index=False)
print("Exportado Exitosamente")

print("")
print("PASO 9 GRAFICOS CLAVES PARA EL ESTUDIO DE ANALISIS DE DATOS")
print("")


#grafico de matriz de correlacion
plt.title("GRÁFICO DE LA MATRIZ DE CORRELACIÓN DE LOS DATOS")
correlation_mat = data.corr()
img=sns.heatmap(correlation_mat, annot = True)
plt.show()
figure=img.get_figure()
figure.savefig("matrizdecorrelacion.png",dpi=400)

#grafico de histogramas
plt.rc('xtick', labelsize=5)
plt.rc('ytick', labelsize=5)
plt.xlabel("Tipos de Crimenes", size =12)
plt.ylabel("Frecencias", size = 5)
plt.title("GRÁFICO DE HISTOGRAMA POR TIPOS DE CRIMENES")
img=data['Crime Type'].plot.hist()
plt.show()
figure=img.get_figure()
figure.savefig("histogramaCrimeType.png",dpi=400)

plt.rc('xtick', labelsize=5)
plt.rc('ytick', labelsize=5)
plt.xlabel("Solución del Crimen", size =12)
plt.ylabel("Frecencias", size = 5)
plt.title("GRÁFICO DE HISTOGRAMA POR SOLUCIÓN DEL CRIMEN")
img=data['Crime Solved'].plot.hist()
plt.show()
figure=img.get_figure()
figure.savefig("histogramaCrimeSolved.png",dpi=400)

#grafico de barras
plt.rc('xtick', labelsize=5)
plt.rc('ytick', labelsize=5)
plt.xlabel("Cantidad", size =12)
plt.ylabel("States", size = 5)
plt.title("GRÁFICO DE BARRA POR ESTADOS")
img=states.plot.barh()
plt.show()
figure=img.get_figure()
figure.savefig("barrasState.png",dpi=400)

#grafico de pasteles para ver en proporcion las victimas con respecto al sexo
plt.rc('xtick', labelsize=10)
plt.rc('ytick', labelsize=20)
plt.xlabel("", size =12)
plt.ylabel("Sexo de la Víctima", size = 20)
plt.title("GRÁFICO DEL PASTEL POR EL SEXO DE LA VÍCTIMA")
img=data['Victim Sex'].value_counts().plot.pie()
figure=img.get_figure()
figure.savefig("PastelVictima.png",dpi=400)
plt.show()

plt.rc('xtick', labelsize=10)
plt.rc('ytick', labelsize=20)
plt.xlabel("", size =12)
plt.ylabel("Sexo del Agresor", size = 20)
plt.title("GRÁFICO DEL PASTEL POR EL SEXO DEL AGRESOR")
img=data['Perpetrator Sex'].value_counts().plot.pie()
figure=img.get_figure()
figure.savefig("PastelAgresor.png",dpi=400)
plt.show()
#MAPAS DE CALOR POR ESTADO
valormax=states.max()
valormin=states.min()
mdata=pd.DataFrame(states)
plt.rc('xtick', labelsize=5)
plt.rc('ytick', labelsize=4)
f, (ax1) = plt.subplots(figsize = (6,4),nrows=1)
cmap = sns.cubehelix_palette(start = 1.5, rot = 3, gamma=0.8, as_cmap = True)
mapa=sns.heatmap(mdata, linewidths = 0.05, ax = ax1, vmax=valormax, vmin=valormin, cmap=cmap)
ax1.set_title('MAPA DE CALOR DE LOS ESTADOS POR CANTIDAD')
ax1.set_xlabel('')
ax1.set_xticklabels ([]) # Establezca la leyenda del eje x en un valor nulo
ax1.set_ylabel('')
figure=mapa.get_figure()
figure.savefig("mapadecalorestados.png",dpi=400)
plt.show()
#MAPA DE CALOR POR ESTADOS MAPEADOS
states1= data.groupby('State')['Victim Sex'].count()
valormax=states1.max()
valormin=states1.min()
mdata=pd.DataFrame(states1)
plt.rc('xtick', labelsize=5)
plt.rc('ytick', labelsize=4)
f, (ax1) = plt.subplots(figsize = (6,4),nrows=1)
cmap = sns.cubehelix_palette(start = 1.5, rot = 3, gamma=0.8, as_cmap = True)
mapa=sns.heatmap(mdata, linewidths = 0.05, ax = ax1, vmax=valormax, vmin=valormin, cmap=cmap)
ax1.set_title('MAPA DE CALOR DE LOS ESTADOS MAPEADOS POR CANTIDAD')
ax1.set_xlabel('')
ax1.set_xticklabels ([]) # Establezca la leyenda del eje x en un valor nulo
ax1.set_ylabel('States')
figure=mapa.get_figure()
figure.savefig("mapadecalorestadosmapeados.png",dpi=400)
plt.show()

